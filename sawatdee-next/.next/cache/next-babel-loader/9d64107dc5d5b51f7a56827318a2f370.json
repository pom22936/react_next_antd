{"ast":null,"code":"function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport Layouts from '../components/Layouts';\nimport { Form, Input, Tooltip, Icon, Cascader, Select, Row, Col, Checkbox, Button, AutoComplete } from 'antd';\nvar Option = Select.Option;\nvar AutoCompleteOption = AutoComplete.Option;\nvar residences = [{\n  value: 'zhejiang',\n  label: 'Zhejiang',\n  children: [{\n    value: 'hangzhou',\n    label: 'Hangzhou',\n    children: [{\n      value: 'xihu',\n      label: 'West Lake'\n    }]\n  }]\n}, {\n  value: 'jiangsu',\n  label: 'Jiangsu',\n  children: [{\n    value: 'nanjing',\n    label: 'Nanjing',\n    children: [{\n      value: 'zhonghuamen',\n      label: 'Zhong Hua Men'\n    }]\n  }]\n}];\n\nvar Form_contact =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Form_contact, _React$Component);\n\n  function Form_contact(props) {\n    var _this;\n\n    _classCallCheck(this, Form_contact);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form_contact).call(this, props));\n\n    _this.hendelsubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.form.validateFieldsAndScroll(function (err, values) {\n        if (!err) {\n          console.log('Received values of form: ', values);\n        }\n      });\n    };\n\n    _this.handleConfirmBlur = function (e) {\n      var value = e.target.value;\n\n      _this.setState({\n        confirmDirty: _this.state.confirmDirty || !!value\n      });\n    };\n\n    _this.compareToFirstPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    _this.validateToNextPassword = function (rule, value, callback) {\n      var form = _this.props.form;\n\n      if (value && _this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n\n    _this.handleWebsiteChange = function (value) {\n      var autoCompleteResult;\n\n      if (!value) {\n        autoCompleteResult = [];\n      } else {\n        autoCompleteResult = ['.com', '.org', '.net'].map(function (domain) {\n          return \"\".concat(value).concat(domain);\n        });\n      }\n\n      _this.setState({\n        autoCompleteResult: autoCompleteResult\n      });\n    };\n\n    _this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n    return _this;\n  }\n\n  _createClass(Form_contact, [{\n    key: \"render\",\n    value: function render() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      var autoCompleteResult = this.state.autoCompleteResult;\n      var formItemLayout = {\n        labelCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 8\n          }\n        },\n        wrapperCol: {\n          xs: {\n            span: 24\n          },\n          sm: {\n            span: 16\n          }\n        }\n      };\n      var tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0\n          },\n          sm: {\n            span: 16,\n            offset: 8\n          }\n        }\n      };\n      var prefixSelector = getFieldDecorator('prefix', {\n        initialValue: '86'\n      })(React.createElement(Select, {\n        style: {\n          width: 70\n        }\n      }, React.createElement(Option, {\n        value: \"86\"\n      }, \"+86\"), React.createElement(Option, {\n        value: \"87\"\n      }, \"+87\")));\n      var websiteOptions = autoCompleteResult.map(function (website) {\n        return React.createElement(AutoCompleteOption, {\n          key: website\n        }, website);\n      });\n      return React.createElement(\"div\", null, React.createElement(Layouts, null, React.createElement(Form, _extends({}, formItemLayout, {\n        onSubmit: this.handleSubmit\n      }), React.createElement(Form.Item, {\n        label: \"E-mail\"\n      }, getFieldDecorator('email', {\n        rules: [{\n          type: 'email',\n          message: 'The input is not valid E-mail!'\n        }, {\n          required: true,\n          message: 'Please input your E-mail!'\n        }]\n      })(React.createElement(Input, null))), React.createElement(Form.Item, {\n        label: \"Password\",\n        hasFeedback: true\n      }, getFieldDecorator('password', {\n        rules: [{\n          required: true,\n          message: 'Please input your password!'\n        }, {\n          validator: this.validateToNextPassword\n        }]\n      })(React.createElement(Input.Password, null))), React.createElement(Form.Item, {\n        label: \"Confirm Password\",\n        hasFeedback: true\n      }, getFieldDecorator('confirm', {\n        rules: [{\n          required: true,\n          message: 'Please confirm your password!'\n        }, {\n          validator: this.compareToFirstPassword\n        }]\n      })(React.createElement(Input.Password, {\n        onBlur: this.handleConfirmBlur\n      }))), React.createElement(Form.Item, {\n        label: React.createElement(\"span\", null, \"Nickname\\xA0\", React.createElement(Tooltip, {\n          title: \"What do you want others to call you?\"\n        }, React.createElement(Icon, {\n          type: \"question-circle-o\"\n        })))\n      }, getFieldDecorator('nickname', {\n        rules: [{\n          required: true,\n          message: 'Please input your nickname!',\n          whitespace: true\n        }]\n      })(React.createElement(Input, null))), React.createElement(Form.Item, {\n        label: \"Habitual Residence\"\n      }, getFieldDecorator('residence', {\n        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\n        rules: [{\n          type: 'array',\n          required: true,\n          message: 'Please select your habitual residence!'\n        }]\n      })(React.createElement(Cascader, {\n        options: residences\n      }))), React.createElement(Form.Item, {\n        label: \"Phone Number\"\n      }, getFieldDecorator('phone', {\n        rules: [{\n          required: true,\n          message: 'Please input your phone number!'\n        }]\n      })(React.createElement(Input, {\n        addonBefore: prefixSelector,\n        style: {\n          width: '100%'\n        }\n      }))), React.createElement(Form.Item, {\n        label: \"Website\"\n      }, getFieldDecorator('website', {\n        rules: [{\n          required: true,\n          message: 'Please input website!'\n        }]\n      })(React.createElement(AutoComplete, {\n        dataSource: websiteOptions,\n        onChange: this.handleWebsiteChange,\n        placeholder: \"website\"\n      }, React.createElement(Input, null)))), React.createElement(Form.Item, {\n        label: \"Captcha\",\n        extra: \"We must make sure that your are a human.\"\n      }, React.createElement(Row, {\n        gutter: 8\n      }, React.createElement(Col, {\n        span: 12\n      }, getFieldDecorator('captcha', {\n        rules: [{\n          required: true,\n          message: 'Please input the captcha you got!'\n        }]\n      })(React.createElement(Input, null))), React.createElement(Col, {\n        span: 12\n      }, React.createElement(Button, null, \"Get captcha\")))), React.createElement(Form.Item, tailFormItemLayout, getFieldDecorator('agreement', {\n        valuePropName: 'checked'\n      })(React.createElement(Checkbox, null, \"I have read the \", React.createElement(\"a\", {\n        href: \"\"\n      }, \"agreement\")))), React.createElement(Form.Item, tailFormItemLayout, React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\"\n      }, \"Register\")))));\n    }\n  }]);\n\n  return Form_contact;\n}(React.Component);\n\nvar WrappedForm_contact = Form.create({\n  name: 'Form_contact'\n})(Form_contact);\nexport default WrappedForm_contact;","map":{"version":3,"sources":["C:\\Users\\Admin\\Documents\\GitHub\\react_next_antd\\sawatdee-next\\pages\\contact.js"],"names":["Layouts","Form","Input","Tooltip","Icon","Cascader","Select","Row","Col","Checkbox","Button","AutoComplete","Option","AutoCompleteOption","residences","value","label","children","Form_contact","props","hendelsubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","console","log","handleConfirmBlur","target","setState","confirmDirty","state","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","validateFields","force","handleWebsiteChange","autoCompleteResult","map","domain","getFieldDecorator","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","prefixSelector","initialValue","width","websiteOptions","website","handleSubmit","rules","type","message","required","validator","whitespace","valuePropName","React","Component","WrappedForm_contact","create","name"],"mappings":"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","sourcesContent":["import Layouts from '../components/Layouts'\r\nimport {\r\n  Form,\r\n  Input,\r\n  Tooltip,\r\n  Icon,\r\n  Cascader,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  Checkbox,\r\n  Button,\r\n  AutoComplete,\r\n} from 'antd';\r\n\r\nconst { Option } = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\n\r\nconst residences = [\r\n  {\r\n    value: 'zhejiang',\r\n    label: 'Zhejiang',\r\n    children: [\r\n      {\r\n        value: 'hangzhou',\r\n        label: 'Hangzhou',\r\n        children: [\r\n          {\r\n            value: 'xihu',\r\n            label: 'West Lake',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    value: 'jiangsu',\r\n    label: 'Jiangsu',\r\n    children: [\r\n      {\r\n        value: 'nanjing',\r\n        label: 'Nanjing',\r\n        children: [\r\n          {\r\n            value: 'zhonghuamen',\r\n            label: 'Zhong Hua Men',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nclass Form_contact extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      confirmDirty: false,\r\n      autoCompleteResult: [],\r\n    }\r\n  }\r\n\r\n  hendelsubmit = e =>{\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err,values) => {\r\n      if(!err){\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  handleWebsiteChange = value => {\r\n    let autoCompleteResult;\r\n    if (!value) {\r\n      autoCompleteResult = [];\r\n    } else {\r\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n    }\r\n    this.setState({ autoCompleteResult });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { autoCompleteResult } = this.state;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n    const prefixSelector = getFieldDecorator('prefix', {\r\n      initialValue: '86',\r\n    })(\r\n      <Select style={{ width: 70 }}>\r\n        <Option value=\"86\">+86</Option>\r\n        <Option value=\"87\">+87</Option>\r\n      </Select>,\r\n    );\r\n\r\n    const websiteOptions = autoCompleteResult.map(website => (\r\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\r\n    ));\r\n    return (\r\n      <div>\r\n      <Layouts>\r\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n        <Form.Item label=\"E-mail\">\r\n          {getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: 'The input is not valid E-mail!',\r\n              },\r\n              {\r\n                required: true,\r\n                message: 'Please input your E-mail!',\r\n              },\r\n            ],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Password\" hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" hasFeedback>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please confirm your password!',\r\n              },\r\n              {\r\n                validator: this.compareToFirstPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={\r\n            <span>\r\n              Nickname&nbsp;\r\n              <Tooltip title=\"What do you want others to call you?\">\r\n                <Icon type=\"question-circle-o\" />\r\n              </Tooltip>\r\n            </span>\r\n          }\r\n        >\r\n          {getFieldDecorator('nickname', {\r\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Habitual Residence\">\r\n          {getFieldDecorator('residence', {\r\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\r\n            rules: [\r\n              { type: 'array', required: true, message: 'Please select your habitual residence!' },\r\n            ],\r\n          })(<Cascader options={residences} />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Phone Number\">\r\n          {getFieldDecorator('phone', {\r\n            rules: [{ required: true, message: 'Please input your phone number!' }],\r\n          })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Website\">\r\n          {getFieldDecorator('website', {\r\n            rules: [{ required: true, message: 'Please input website!' }],\r\n          })(\r\n            <AutoComplete\r\n              dataSource={websiteOptions}\r\n              onChange={this.handleWebsiteChange}\r\n              placeholder=\"website\"\r\n            >\r\n              <Input />\r\n            </AutoComplete>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n          <Row gutter={8}>\r\n            <Col span={12}>\r\n              {getFieldDecorator('captcha', {\r\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\r\n              })(<Input />)}\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button>Get captcha</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          {getFieldDecorator('agreement', {\r\n            valuePropName: 'checked',\r\n          })(\r\n            <Checkbox>\r\n              I have read the <a href=\"\">agreement</a>\r\n            </Checkbox>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      </Layouts>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedForm_contact = Form.create({ name: 'Form_contact' })(Form_contact);\r\n\r\nexport default WrappedForm_contact\r\n\r\n"]},"metadata":{},"sourceType":"module"}