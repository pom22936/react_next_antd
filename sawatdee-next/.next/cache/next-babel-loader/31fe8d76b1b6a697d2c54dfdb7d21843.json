{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and set to use loose mode. ' + 'To use proposal-class-properties in spec mode with decorators, wait for ' + 'the next major version of decorators in stage 2.'); }\n\nimport { observable, autorun } from \"mobx\"; // let todos = observable([\n//         { title: \"Spoil tea\" },\n//         { title: \"Make coffee\" }\n//     ]);\n// test = (data) => {\n//     todos.push(data)\n// }\n\nvar Stock = (_class = (_temp =\n/*#__PURE__*/\nfunction () {\n  function Stock() {\n    _classCallCheck(this, Stock);\n\n    _initializerDefineProperty(this, \"data\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"counter\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"rest\", _descriptor3, this);\n  }\n\n  _createClass(Stock, [{\n    key: \"increase\",\n    value: function increase() {\n      this.counter = this.counter + 1;\n    }\n  }, {\n    key: \"decrease\",\n    value: function decrease() {\n      this.counter = this.counter - 1;\n    }\n  }, {\n    key: \"setdata\",\n    value: function setdata(val) {\n      console.log(val);\n      var a = [];\n      a.push(val);\n      console.log(a);\n    }\n  }]);\n\n  return Stock;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [\"dragonQuest\", \"finalFantasy\"];\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"counter\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return 0;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"rest\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n})), _class);\nvar stock = new Stock();\nexport default stock; // autorun(()=>{\n// });","map":{"version":3,"sources":["C:\\Users\\Admin\\Documents\\GitHub\\react_next_antd\\sawatdee-next\\Services\\Stock.js"],"names":["observable","autorun","Stock","counter","val","console","log","a","push","stock"],"mappings":";;;;;;;;;;;;;;AAAA,SAAQA,UAAR,EAAmBC,OAAnB,QAAiC,MAAjC,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;IAEMC,K;;;;;;;;;;;;;;;+BAKS;AACP,WAAKC,OAAL,GAAe,KAAKA,OAAL,GAAe,CAA9B;AACH;;;+BACU;AACP,WAAKA,OAAL,GAAe,KAAKA,OAAL,GAAe,CAA9B;AACH;;;4BAEOC,G,EAAK;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAIG,CAAC,GAAG,EAAR;AACAA,MAAAA,CAAC,CAACC,IAAF,CAAOJ,GAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AAEH;;;;iFAjBAP,U;;;;;WAAkB,CAAC,aAAD,EAAe,cAAf,C;;2EAClBA,U;;;;;WAAqB,C;;wEACrBA,U;;;;;WAAkB,E;;;AAsBvB,IAAIS,KAAK,GAAG,IAAIP,KAAJ,EAAZ;AAEA,eAAeO,KAAf,C,CAEA;AAEA","sourcesContent":["import {observable,autorun} from \"mobx\";\r\n\r\n// let todos = observable([\r\n//         { title: \"Spoil tea\" },\r\n//         { title: \"Make coffee\" }\r\n//     ]);\r\n\r\n// test = (data) => {\r\n//     todos.push(data)\r\n// }\r\n\r\nclass Stock{\r\n    @observable data = [\"dragonQuest\",\"finalFantasy\"];\r\n    @observable counter = 0;\r\n    @observable rest = [];\r\n\r\n    increase() {\r\n        this.counter = this.counter + 1;\r\n    }\r\n    decrease() {\r\n        this.counter = this.counter - 1;\r\n    }\r\n\r\n    setdata(val) {\r\n        console.log(val);\r\n        let a = [];\r\n        a.push(val);\r\n        console.log(a)\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nlet stock = new Stock;\r\n\r\nexport default stock;\r\n\r\n// autorun(()=>{\r\n    \r\n// });"]},"metadata":{},"sourceType":"module"}