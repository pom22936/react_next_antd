{"version":3,"file":"static/webpack/static\\development\\pages\\contact.js.79faa797f6107fc92dcf.hot-update.js","sources":["webpack:///./pages/contact.js"],"sourcesContent":["import Layouts from '../components/Layouts'\r\nimport React,{Component} from \"react\"\r\nimport {\r\n  Form,\r\n  Input,\r\n  Tooltip,\r\n  Icon,\r\n  Cascader,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  Checkbox,\r\n  Button,\r\n  AutoComplete,\r\n} from 'antd';\r\n\r\nconst { Option } = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\n\r\nconst residences = [\r\n  {\r\n    value: 'zhejiang',\r\n    label: 'Zhejiang',\r\n    children: [\r\n      {\r\n        value: 'hangzhou',\r\n        label: 'Hangzhou',\r\n        children: [\r\n          {\r\n            value: 'xihu',\r\n            label: 'West Lake',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    value: 'jiangsu',\r\n    label: 'Jiangsu',\r\n    children: [\r\n      {\r\n        value: 'nanjing',\r\n        label: 'Nanjing',\r\n        children: [\r\n          {\r\n            value: 'zhonghuamen',\r\n            label: 'Zhong Hua Men',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nclass Form_contact extends Component{\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      confirmDirty: false,\r\n      autoCompleteResult: [],\r\n    }\r\n  }\r\n\r\n  hendelsubmit = e =>{\r\n    e.preventDefault();\r\n    this.props.form.validateFieldsAndScroll((err,values) => {\r\n      if(!err){\r\n        console.log('Received values of form: ', values);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleConfirmBlur = e => {\r\n    const { value } = e.target;\r\n    this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n  };\r\n\r\n  compareToFirstPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && value !== form.getFieldValue('password')) {\r\n      callback('Two passwords that you enter is inconsistent!');\r\n    } else {\r\n      callback();\r\n    }\r\n  };\r\n\r\n  validateToNextPassword = (rule, value, callback) => {\r\n    const { form } = this.props;\r\n    if (value && this.state.confirmDirty) {\r\n      form.validateFields(['confirm'], { force: true });\r\n    }\r\n    callback();\r\n  };\r\n\r\n  handleWebsiteChange = value => {\r\n    let autoCompleteResult;\r\n    if (!value) {\r\n      autoCompleteResult = [];\r\n    } else {\r\n      autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n    }\r\n    this.setState({ autoCompleteResult });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    const { autoCompleteResult } = this.state;\r\n\r\n    const formItemLayout = {\r\n      labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n      },\r\n      wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n      },\r\n    };\r\n    const tailFormItemLayout = {\r\n      wrapperCol: {\r\n        xs: {\r\n          span: 24,\r\n          offset: 0,\r\n        },\r\n        sm: {\r\n          span: 16,\r\n          offset: 8,\r\n        },\r\n      },\r\n    };\r\n    const prefixSelector = getFieldDecorator('prefix', {\r\n      initialValue: '86',\r\n    })(\r\n      <Select style={{ width: 70 }}>\r\n        <Option value=\"86\">+86</Option>\r\n        <Option value=\"87\">+87</Option>\r\n      </Select>,\r\n    );\r\n\r\n    const websiteOptions = autoCompleteResult.map(website => (\r\n      <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\r\n    ));\r\n    return (\r\n      <div>\r\n      <Layouts>\r\n      <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n        <Form.Item label=\"E-mail\">\r\n          {getFieldDecorator('email', {\r\n            rules: [\r\n              {\r\n                type: 'email',\r\n                message: 'The input is not valid E-mail!',\r\n              },\r\n              {\r\n                required: true,\r\n                message: 'Please input your E-mail!',\r\n              },\r\n            ],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Password\" hasFeedback>\r\n          {getFieldDecorator('password', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please input your password!',\r\n              },\r\n              {\r\n                validator: this.validateToNextPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Confirm Password\" hasFeedback>\r\n          {getFieldDecorator('confirm', {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: 'Please confirm your password!',\r\n              },\r\n              {\r\n                validator: this.compareToFirstPassword,\r\n              },\r\n            ],\r\n          })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n        </Form.Item>\r\n        <Form.Item\r\n          label={\r\n            <span>\r\n              Nickname&nbsp;\r\n              <Tooltip title=\"What do you want others to call you?\">\r\n                <Icon type=\"question-circle-o\" />\r\n              </Tooltip>\r\n            </span>\r\n          }\r\n        >\r\n          {getFieldDecorator('nickname', {\r\n            rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\r\n          })(<Input />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Habitual Residence\">\r\n          {getFieldDecorator('residence', {\r\n            initialValue: ['zhejiang', 'hangzhou', 'xihu'],\r\n            rules: [\r\n              { type: 'array', required: true, message: 'Please select your habitual residence!' },\r\n            ],\r\n          })(<Cascader options={residences} />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Phone Number\">\r\n          {getFieldDecorator('phone', {\r\n            rules: [{ required: true, message: 'Please input your phone number!' }],\r\n          })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\r\n        </Form.Item>\r\n        <Form.Item label=\"Website\">\r\n          {getFieldDecorator('website', {\r\n            rules: [{ required: true, message: 'Please input website!' }],\r\n          })(\r\n            <AutoComplete\r\n              dataSource={websiteOptions}\r\n              onChange={this.handleWebsiteChange}\r\n              placeholder=\"website\"\r\n            >\r\n              <Input />\r\n            </AutoComplete>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n          <Row gutter={8}>\r\n            <Col span={12}>\r\n              {getFieldDecorator('captcha', {\r\n                rules: [{ required: true, message: 'Please input the captcha you got!' }],\r\n              })(<Input />)}\r\n            </Col>\r\n            <Col span={12}>\r\n              <Button>Get captcha</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          {getFieldDecorator('agreement', {\r\n            valuePropName: 'checked',\r\n          })(\r\n            <Checkbox>\r\n              I have read the <a href=\"\">agreement</a>\r\n            </Checkbox>,\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item {...tailFormItemLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Register\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n      </Layouts>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst WrappedForm_contact = Form.create({ name: 'Form_contact' })(Form_contact);\r\n\r\nexport default WrappedForm_contact\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAcA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAJA;AAJA;AAiBA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAFA;AAJA;AAJA;AACA;AAiBA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAkBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAtBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;AAgCA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAvCA;AAyCA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AA9CA;AACA;AACA;AAFA;AAHA;AAOA;AACA;;;AA0CA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AADA;AAYA;AACA;AADA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AADA;AAGA;AAGA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AANA;AAaA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AADA;AANA;AAYA;AAAA;AAAA;AAEA;AAEA;AACA;AAFA;AAKA;AADA;AANA;AAUA;AAAA;AAGA;AAGA;AAAA;AACA;AAAA;AALA;AAWA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAKA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AACA;AAHA;AASA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAOA;AADA;AAIA;AAAA;AAKA;AAAA;AAAA;AAQA;;;;AA3MA;AACA;AA6MA;AAAA;AAAA;AAEA;;;;A","sourceRoot":""}